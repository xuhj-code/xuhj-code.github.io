<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小红叔de博客｜Harukong&#39;Blog</title>
  
  
  <link href="http://blog.lit402.top/atom.xml" rel="self"/>
  
  <link href="http://blog.lit402.top/"/>
  <updated>2024-07-04T03:00:48.001Z</updated>
  <id>http://blog.lit402.top/</id>
  
  <author>
    <name>Harukong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谷歌软件工程师：编写程序时的工作流程</title>
    <link href="http://blog.lit402.top/2024/07/03/%E8%B0%B7%E6%AD%8C%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%9A%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E6%97%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.lit402.top/2024/07/03/%E8%B0%B7%E6%AD%8C%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%EF%BC%9A%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E6%97%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    <published>2024-07-03T09:00:39.000Z</published>
    <updated>2024-07-04T03:00:48.001Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>编写程序时，正确合适的工作流程能够确保高效地完成工作目标。近日，谷歌软件工程师史提夫·梅利特（Steve Merritt）在博客上分享了自己的工作流程。<br>梅利特介绍了他从头至尾解决编程问题的策略，他既在谷歌的日常工作中使用这一策略，也在和各种水平的编程人员（训练营、大学生和实习生等）合作时使用它（帮助他们学习和成长）。应用这一结构化的流程能尽可能地缩减令人沮丧的调试过程，在更少的时间里得到更清晰更正确的代码。</p></blockquote><span id="more"></span><h3 id="第一步：画出来"><a href="#第一步：画出来" class="headerlink" title="第一步：画出来"></a>第一步：画出来</h3><p>通常而言，一个问题的解决方案并不是浅显直观的，即使可能乍看起来很简单。在纸上琢磨一下能让你找到解决方案并验证该方案在一些不同场景中的效果。所有这些工作都应该在写下任何一行代码之前完成。</p><p>所以先不要写代码。甚至不要去想代码。后面你会有足够的时间去添加分号和括号。现在你只需要搞清楚你作为一台人体计算机，会如何解决这个问题。</p><p>画图、使用箭头、在小方框里填写数字。只要能让你可视化这个问题，就可以去做。你的目标是解决问题，你能用纸张和铅笔尽情发挥，而不受限于键盘。</p><h3 id="第二步：写成普通话"><a href="#第二步：写成普通话" class="headerlink" title="第二步：写成普通话"></a>第二步：写成普通话</h3><p>在第一步确定的算法，可以用平实易懂的语言把它写出来。这能使这些步骤显得具体，也能够在写代码时回顾参考。</p><h3 id="第三步：写伪代码"><a href="#第三步：写伪代码" class="headerlink" title="第三步：写伪代码"></a>第三步：写伪代码</h3><p>伪代码并不是真正的代码，但却模仿了代码的结构。伪代码与代码的接近程度完全由你决定，随着时间的推移，你会发现最适合自己的风格。</p><h3 id="第四步：将你能做到的部分翻译成代码"><a href="#第四步：将你能做到的部分翻译成代码" class="headerlink" title="第四步：将你能做到的部分翻译成代码"></a>第四步：将你能做到的部分翻译成代码</h3><p>这是整个流程中我们第一次必须考虑句法、函数参数和语言规则。你也许没法写出所有一切，但没有关系，把你知道的部分写出来就好了。</p><h3 id="第五步：不要猜测"><a href="#第五步：不要猜测" class="headerlink" title="第五步：不要猜测"></a>第五步：不要猜测</h3><p>代码新人常会犯一个错误：在互联网上找一些写着“可能有效”的东西，然后不加测试地将其插入到自己的程序中。你的程序中你不理解的片段越多，你就越不可能最后得到正确的解决方案。</p><p>每增加一个你不确定的东西，你的程序可能出错的方式都会翻一倍。如果你的代码无效，那么这里可能就是问题所在。</p><p>这就需要测试你的新代码，在将其插入你的程序之前应该在另一个单独的小空间里测试一下它，以确保其工作方式和你所想的一样。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;编写程序时，正确合适的工作流程能够确保高效地完成工作目标。近日，谷歌软件工程师史提夫·梅利特（Steve Merritt）在博客上分享了自己的工作流程。&lt;br&gt;梅利特介绍了他从头至尾解决编程问题的策略，他既在谷歌的日常工作中使用这一策略，也在和各种水平的编程人员（训练营、大学生和实习生等）合作时使用它（帮助他们学习和成长）。应用这一结构化的流程能尽可能地缩减令人沮丧的调试过程，在更少的时间里得到更清晰更正确的代码。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机伪代码</title>
    <link href="http://blog.lit402.top/2024/07/03/hello-world/"/>
    <id>http://blog.lit402.top/2024/07/03/hello-world/</id>
    <published>2024-07-03T05:01:38.047Z</published>
    <updated>2024-07-04T01:15:14.408Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>伪代码(Pseudo code)是一种介于计算机语言和自然语言间的文字和符号，是表达算法的简单而有效的方法。伪代码不需要关注底层是如何实现的，本身就是算法框架的逻辑模型。<br>相比程序语言 (例如Java,C&#x2F;C++等等) 它是不标准的语言。但它可以将整个算法运行过程的结构用接近自然语言的形式(可以使用任何一种你熟悉的文字，关键是把程序的意思表达出来) 描述出来。</p></blockquote><span id="more"></span><h3 id="伪代码的主要注意点"><a href="#伪代码的主要注意点" class="headerlink" title="伪代码的主要注意点"></a>伪代码的主要注意点</h3><h4 id="每条指令占一行，指令后不跟任何符号"><a href="#每条指令占一行，指令后不跟任何符号" class="headerlink" title="每条指令占一行，指令后不跟任何符号;"></a>每条指令占一行，指令后不跟任何符号;</h4><h4 id="用缩进表示程序中的分支、循环程序结构-若if，while，for等语句中如有多个子语句可使用-；"><a href="#用缩进表示程序中的分支、循环程序结构-若if，while，for等语句中如有多个子语句可使用-；" class="headerlink" title="用缩进表示程序中的分支、循环程序结构(若if，while，for等语句中如有多个子语句可使用[})；"></a>用缩进表示程序中的分支、循环程序结构(若if，while，for等语句中如有多个子语句可使用[})；</h4><h4 id="注释用“-”表示"><a href="#注释用“-”表示" class="headerlink" title="注释用“&#x2F;&#x2F;”表示"></a>注释用“&#x2F;&#x2F;”表示</h4><h3 id="伪代码的“语句规范”"><a href="#伪代码的“语句规范”" class="headerlink" title="伪代码的“语句规范”"></a>伪代码的“语句规范”</h3><h2 id="开始与结束"><a href="#开始与结束" class="headerlink" title="开始与结束"></a>开始与结束</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开始: 用BEGIN表示算法开始</span><br><span class="line">结束: 用END表示算法结束</span><br></pre></td></tr></table></figure><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">赋值号A &lt;- B//表示将B的值赋值给A；</span><br><span class="line">相当于C语言中的: A = B，其中定义变量的语句可以不用写出来，但必须在注释中给出，如: </span><br><span class="line">a &lt;- 5 //这里的a表示整形变量</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用[]来表示数组: al1...10]、a[10]、 a[1]...a[10]</span><br><span class="line">a &lt;-&gt; b //表示a跟b的内容进行交换</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>当算法需要输入的时候，我们通常用Input；当算法需要输出的时候，我们通常用Output或用Print；像输入数据、输出结果写在开头，中间写算法主体的伪代码，里面用Return返回结果。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: 使用Input: 如: intput parameters A，B</span><br><span class="line">intput parameters A[]//数组</span><br><span class="line">输出: 使用Output (或Print) :如: Output A，B，result</span><br><span class="line">返回值: 使用Return</span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件语句和我们C语言的用法有点相似，用if else表达分支，里面可以嵌套很多的if else，需要注意的是if后面需要跟上then而is后面不用跟then，最后用end结束分支。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if A</span><br><span class="line">  then B</span><br><span class="line">  else C</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环语句和我们C语言的用法也是相似的，一般用两种循环语句for和while，for和while最面最好跟上do还有结束符号end。</p><h4 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1. for循环"></a>1. for循环</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>-&gt;i=N <span class="comment">//也可以使用for i=1 to i=N，for i 1 to N</span></span><br><span class="line">  <span class="keyword">do</span> sentences</span><br><span class="line">end <span class="keyword">for</span></span><br></pre></td></tr></table></figure><h4 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2. while循环"></a>2. while循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> A</span><br><span class="line">  <span class="keyword">do</span> sentences</span><br><span class="line">end <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h3 id="伪代码和代码的区别"><a href="#伪代码和代码的区别" class="headerlink" title="伪代码和代码的区别"></a>伪代码和代码的区别</h3><h4 id="求出两个不全为0的非负数整数的最大公约数的伪代码和代码"><a href="#求出两个不全为0的非负数整数的最大公约数的伪代码和代码" class="headerlink" title="求出两个不全为0的非负数整数的最大公约数的伪代码和代码"></a>求出两个不全为0的非负数整数的最大公约数的伪代码和代码</h4><p>  下列代码定义了三个变量，如果n不为0则一直做下面的循环，m和n取余结果赋值给r；原来的除数n作为被除数；余数r作为除数；一直循环直到余数为0，返回m的值。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m,n,r;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">    r = m%n;</span><br><span class="line">    m = n;</span><br><span class="line">    n = r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m;</span><br></pre></td></tr></table></figure><h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><p>  下列伪代码先写BEGIN和END，这里需要输入两个数，可以不去定义它们的类型，可以在注释里面说一下。下面用一个while循环，形式跟代码里面的结构是一样的，只是符号变了一下，也不用花括号了，最后结束循环输出m的值。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">input n,m //这里的n,m是整型变量</span><br><span class="line">while n≠0</span><br><span class="line">      do</span><br><span class="line">      r &lt;- m mode n</span><br><span class="line">      m &lt;- n</span><br><span class="line">      n &lt;- r</span><br><span class="line">end while</span><br><span class="line">output m</span><br><span class="line">END     </span><br></pre></td></tr></table></figure><p>上面的算法是著名的欧几里得算法，<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E9%99%A4%E6%B3%95&fromid=5124765">算法简介链接</a></p><h3 id="进阶说明"><a href="#进阶说明" class="headerlink" title="进阶说明"></a>进阶说明</h3><p>  遇到复杂的算法、函数功能，不知道怎么用代码表示时，可以用自然语言描述，或在注释中说明。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>  公共自行车是城市公共通的重要组成部分，解决公共交通最后一公里的问题。公共自行车运营管里系统可以完成借车、还车、信息查询等功能。<br>  假设“还车”功能的主要流程为：1、将自行车推入锁止器；2、锁止器读取车号，并提示刷卡;3、用户刷卡；4、系统读取卡片中的借车信息；5、系统计算还车时间，判断是否超过1小时;若超过1小时，则从卡中扣除1元，否则不扣除费用；6、系统更新还车信息到数据中心；7、系统语音提示还车成功。<br>  请给出该系统“还车”功能的伪代码。</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>  这道题要求给出该系统“还车”功能的伪代码，还车一共7个步骤，显然没有办法使用代码来描述整个流程，因为题目中没有给我们任何代码相关的信息。这个时候我们就可以用自然语言，也就是用文字去描述这个流程。首先把题目中所有的流程列在左边对照着来写</p><table><thead><tr><th align="left">流程描述</th><th>伪代码</th></tr></thead><tbody><tr><td align="left">1、将自行车推入锁止器；</td><td>BEGIN IF 自行车推入锁止器 ELSE 还车失败</td></tr><tr><td align="left">2、锁止器读取车号，并提示刷卡;</td><td>THEN 读取车号 提示刷卡</td></tr><tr><td align="left">3、用户刷卡；</td><td>IF 用户刷卡</td></tr><tr><td align="left">4、系统读取卡片中的借车信息；</td><td>THEN 读取卡片中的借车信息</td></tr><tr><td align="left">5、系统计算还车时间，判断是否超过1小时;</td><td>计算还车时间</td></tr><tr><td align="left">若超过1小时，则从卡中扣除1元，否则不扣除费用；</td><td>IF 超过1小时 THEN  扣除1元 ELSE 不扣钱</td></tr><tr><td align="left">6、系统更新还车信息到数据中心；</td><td>【可写可不写】</td></tr><tr><td align="left">7、系统语音提示还车成功；</td><td>提示还车成功</td></tr></tbody></table><p>  我们写伪代码的初衷是把程序的意思表达出来，无关紧要的细节可以省略掉。<br>  伪代码不是代码的具体实现，必然会存在瑕疵或者说缺少一些细节，如果说要把所有的情况都写出来，试卷都不一定写的下，非常的繁琐，也违背了我们写伪代码的初衷。<br>伪代码格式化一下如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN </span><br><span class="line">IF 自行车推入锁止器</span><br><span class="line">  THEN</span><br><span class="line">    读取车号</span><br><span class="line">    提示刷卡</span><br><span class="line">    IF 用户刷卡</span><br><span class="line">      THEN </span><br><span class="line">        读取卡片中的借车信息</span><br><span class="line">        计算还车时间</span><br><span class="line">          IF 超过1小时</span><br><span class="line">            THEN</span><br><span class="line">              扣除1元</span><br><span class="line">          ELSE 不扣钱</span><br><span class="line">        提示还车成功</span><br><span class="line">    ELSE 还车失败</span><br><span class="line">ELSE 还车失败</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="总结-如何写好伪代码"><a href="#总结-如何写好伪代码" class="headerlink" title="总结:如何写好伪代码?"></a>总结:如何写好伪代码?</h3><h4 id="1、首先写下这个题目所有的流程-可以用流程图表示或者自然语言表示"><a href="#1、首先写下这个题目所有的流程-可以用流程图表示或者自然语言表示" class="headerlink" title="1、首先写下这个题目所有的流程 (可以用流程图表示或者自然语言表示)"></a>1、首先写下这个题目所有的流程 (可以用流程图表示或者自然语言表示)</h4><h4 id="2、使用标准的编程结构，比如-if后面一定要有else"><a href="#2、使用标准的编程结构，比如-if后面一定要有else" class="headerlink" title="2、使用标准的编程结构，比如: if后面一定要有else"></a>2、使用标准的编程结构，比如: if后面一定要有else</h4><h4 id="3、每行只写一条语句-清晰、合理"><a href="#3、每行只写一条语句-清晰、合理" class="headerlink" title="3、每行只写一条语句 (清晰、合理)"></a>3、每行只写一条语句 (清晰、合理)</h4><h4 id="4、while循环和for循环里的循环体一定要空格写"><a href="#4、while循环和for循环里的循环体一定要空格写" class="headerlink" title="4、while循环和for循环里的循环体一定要空格写"></a>4、while循环和for循环里的循环体一定要空格写</h4><h4 id="5、关键字尽量大写-如-IF-ELSE，可以又更好的区分"><a href="#5、关键字尽量大写-如-IF-ELSE，可以又更好的区分" class="headerlink" title="5、关键字尽量大写 如: IF ELSE，可以又更好的区分"></a>5、关键字尽量大写 如: IF ELSE，可以又更好的区分</h4><h4 id="6、复杂的功能，使用简单的关键词和自然语言辅助描述"><a href="#6、复杂的功能，使用简单的关键词和自然语言辅助描述" class="headerlink" title="6、复杂的功能，使用简单的关键词和自然语言辅助描述"></a>6、复杂的功能，使用简单的关键词和自然语言辅助描述</h4><h4 id="7、所有的内容都要描述清楚"><a href="#7、所有的内容都要描述清楚" class="headerlink" title="7、所有的内容都要描述清楚"></a>7、所有的内容都要描述清楚</h4>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;伪代码(Pseudo code)是一种介于计算机语言和自然语言间的文字和符号，是表达算法的简单而有效的方法。伪代码不需要关注底层是如何实现的，本身就是算法框架的逻辑模型。&lt;br&gt;相比程序语言 (例如Java,C&amp;#x2F;C++等等) 它是不标准的语言。但它可以将整个算法运行过程的结构用接近自然语言的形式(可以使用任何一种你熟悉的文字，关键是把程序的意思表达出来) 描述出来。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
